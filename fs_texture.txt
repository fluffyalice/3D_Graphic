#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;
 
uniform vec3 viewPos;
uniform sampler2D first_texture;
uniform sampler2D second_texture;

struct Light {
  int isOn;
  vec3 position;
  vec3 direction;
  float cutOffValue;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform Light light;  
uniform Light sunLight;  
uniform Light spotLight;  

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

void main() {
  vec3 firstTextureColor = vec3(texture(first_texture, aTexCoord));
  vec3 secondTextureColor = vec3(texture(second_texture, aTexCoord));
  vec3 norm = normalize(aNormal);
  vec3 viewDir = normalize(viewPos - aPos);

  vec3 result = vec3(0.0);
  if(light.isOn == 1)
  {
    // ambient
    vec3 ambient = light.ambient * firstTextureColor;

    // diffuse
    vec3 lightDir = normalize(light.position - aPos);  
    float diff = max(dot(norm, lightDir), 0.0);
    
    vec3 diffuse = light.diffuse * diff * firstTextureColor; 
    
    // specular 
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * spec * secondTextureColor;
    result += ambient + diffuse + specular;
  }

  if(sunLight.isOn == 1)
  {
    // ambient
    vec3 ambient = sunLight.ambient * firstTextureColor;

    // diffuse
    vec3 lightDir = sunLight.direction;  
    float diff = max(dot(norm, lightDir), 0.0);
    
    vec3 diffuse = sunLight.diffuse * diff * firstTextureColor; 
    
    // specular 
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = sunLight.specular * spec * secondTextureColor;
    result += ambient + diffuse + specular;
  }

  if(spotLight.isOn == 1)
  {
    // ambient
    vec3 ambient = spotLight.ambient * firstTextureColor;

    // diffuse
    vec3 lightDir = normalize(spotLight.position - aPos);  
    if(dot(lightDir, normalize(spotLight.direction)) > 0.996)
    {
      float diff = max(dot(norm, lightDir), 0.0);
      
      vec3 diffuse = spotLight.diffuse * diff * firstTextureColor; 
      
      // specular 
      vec3 reflectDir = reflect(-lightDir, norm);
      float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
      vec3 specular = spotLight.specular * spec * secondTextureColor;
      result += ambient + diffuse + specular;
    }
  }

  fragColor = vec4(result, 1.0);
}